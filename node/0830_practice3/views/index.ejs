<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="/socket.io/socket.io.js"></script>
    <title>Document</title>
    <style>
        #body {
            width: 100%;
            height: 70vh;
            position: relative;
            background: #8ae4bc;
        }

        #chat {
            position: absolute;
            bottom: 0px;
            display: flex;
            justify-content: space-between;
            width: 100%;
        }

        #chat input {
            width: 80%;
        }

        .my-chat {
            display: flex;
            justify-content: end;
            padding: 2px 0px;
        }

        .my-chat p {
            margin: 0;
            padding: 10px;
            background: yellow;
            border-radius: 10px;
            margin-right: 10px;
        }

        .other-chat {
            display: flex;
            justify-content: start;
            padding: 2px 0px;
        }

        .other-chat p {
            margin: 0;
            padding: 10px;
            background: white;
            border-radius: 10px;
            margin-left: 10px;
        }

        .notice {
            text-align: center;
            color: #2ea8fa;
            padding: 5px;
            border-radius: 5px;
            display: inline-block;
            margin: 5px 0;
        }

        .dm-chat {
            background-color: lightblue;
            padding: 5px;
            margin: 5px;
            border-radius: 5px;
            font-weight: bold;
        }
    </style>
</head>

<body>
    <div id="main">
        <form id="room">
            <input type="text" id="roomName" placeholder="채팅방 만들기" />
            <input type="text" id="userName" placeholder="사용자 이름 입력" />
            <button>만들기</button>
        </form>
        <ul id="lists"></ul>
    </div>
    <div id="body" hidden>
        <div id="msg">
            <div class="my-chat">
                <p>채팅테스트(나)</p>
            </div>
            <div class="other-chat">
                <p>채팅테스트(상대방)</p>
            </div>
            <div id="enterMessages" style="text-align: center;"></div>
            <div id="dmMessages" style="text-align: center;"></div>
        </div>
        <form id="chat">
            <select id="userList"></select>
            <input type="text" id="message" placeholder="메세지 입력" />
            <button>입력</button>
        </form>
    </div>

    <script>
        const socket = io();
        const roomForm = document.querySelector('#room');
        const chatForm = document.querySelector('#chat');
        const msg = document.querySelector('#msg');
        const enterMessages = document.querySelector('#enterMessages');
        const dmMessages = document.querySelector('#dmMessages');

        let myName;
        let selectedUser = 'all';

        socket.on('notice', (message) => {
            const div = document.createElement('div');
            div.textContent = message;
            div.classList.add('notice');
            enterMessages.appendChild(div);
        });

        socket.on('dmMessage', (message, author) => {
            const div = document.createElement('div');
            div.textContent = `${author} (DM): ${message}`;
            div.classList.add('dm-chat');
            dmMessages.appendChild(div);
        });

        //룸리스트
        socket.on('roomList', (roomLists) => {
            console.log(roomLists);
            const lists = document.querySelector('#lists');
            lists.textContent = '';
            roomLists.forEach((roomList) => {
                const li = document.createElement('li');
                li.textContent = `${roomList} 와 닉네임 입력 후 입장`;
                lists.appendChild(li);
            });
        });

        //사용자 리스트
        socket.on('userList', (userLists) => {
            console.log(userLists);
            const lists = document.querySelector('#userList');
            lists.textContent = '';
            let options = `<option value="all">전체</option>`;
            for (let key in userLists) {
                options += `<option value="${key}">${userLists[key]}</option>`;
            }
            lists.innerHTML = options;
        });
        //메세지 띄우기
        socket.on('newMessage', (message, author) => {
            console.log(message, author);
            const div = document.createElement('div');
            const p = document.createElement('p');

            if (myName === author) {
                div.classList.add('my-chat');
            } else {
                div.classList.add('other-chat');
            }

            // 채팅 텍스트
            p.textContent = `${author} : ${message}`;
            div.appendChild(p);
            msg.appendChild(div);
        });


        ///폼 이벤트
        roomForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const roomName = roomForm.querySelector('#roomName');
            const userName = roomForm.querySelector('#userName');

            myName = userName.value;

            if (roomName.value === '' || userName.value === '') {
                alert('방이름과 닉네임 적어주세요');
                return;
            }
            socket.emit('create', roomName.value, userName.value, () => {
                const main = document.querySelector('#main');
                const body = document.querySelector('#body');
                main.hidden = true;
                body.hidden = false;
                //전역변수에 입력한 닉네임을 저장
                myName = userName.value;
            });
        });

        document.querySelector('#userList').addEventListener('change', (e) => {
            selectedUser = e.target.value;
        });

        chatForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const messageInput = document.querySelector('#message');
            const message = messageInput.value;

            if (selectedUser === 'all') {
                socket.emit('sendMessage', { message, author: myName, to: selectedUser });
            } else {
                socket.emit('sendDM', { message, author: myName, to: selectedUser });
                console.log('Client sent DM:', { message, author: myName, to: selectedUser }); // 콘솔 로그 추가
            }

            messageInput.value = '';
        });

        socket.on('dmMessage', (message, author) => {
            console.log(`Received DM: ${message} from ${author}`);

            const div = document.createElement('div');
            div.textContent = `${author} (DM): ${message}`;
            div.classList.add('dm-chat');
            dmMessages.appendChild(div);
        });
    </script>
</body>

</html>